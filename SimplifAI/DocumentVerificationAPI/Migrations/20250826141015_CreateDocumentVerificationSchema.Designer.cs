// <auto-generated />
using System;
using DocumentVerificationAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DocumentVerificationAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250826141015_CreateDocumentVerificationSchema")]
    partial class CreateDocumentVerificationSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DocumentVerificationAPI.Models.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ConfidenceScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBlurred")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsCorrectType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("StatusColor")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("VerificationDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            ConfidenceScore = 95.5m,
                            ContentType = "image/jpeg",
                            DocumentType = "Passport",
                            FileName = "passport_sample.jpg",
                            FilePath = "/uploads/test/passport_sample.jpg",
                            FileSize = 1024000L,
                            FormId = new Guid("11111111-1111-1111-1111-111111111111"),
                            IsBlurred = false,
                            IsCorrectType = true,
                            StatusColor = "Green",
                            UploadedAt = new DateTime(2025, 8, 26, 14, 10, 14, 724, DateTimeKind.Utc).AddTicks(2518),
                            VerificationStatus = "Verified"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            ConfidenceScore = 72.3m,
                            ContentType = "image/jpeg",
                            DocumentType = "DriverLicense",
                            FileName = "license_sample.jpg",
                            FilePath = "/uploads/test/license_sample.jpg",
                            FileSize = 856000L,
                            FormId = new Guid("11111111-1111-1111-1111-111111111111"),
                            IsBlurred = false,
                            IsCorrectType = true,
                            StatusColor = "Yellow",
                            UploadedAt = new DateTime(2025, 8, 26, 14, 10, 14, 724, DateTimeKind.Utc).AddTicks(2531),
                            VerificationStatus = "Verified"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            ConfidenceScore = 25.8m,
                            ContentType = "image/jpeg",
                            DocumentType = "Passport",
                            FileName = "blurred_passport.jpg",
                            FilePath = "/uploads/test/blurred_passport.jpg",
                            FileSize = 512000L,
                            FormId = new Guid("22222222-2222-2222-2222-222222222222"),
                            IsBlurred = true,
                            IsCorrectType = false,
                            StatusColor = "Red",
                            UploadedAt = new DateTime(2025, 8, 26, 14, 10, 14, 724, DateTimeKind.Utc).AddTicks(2540),
                            VerificationStatus = "Failed"
                        });
                });

            modelBuilder.Entity("DocumentVerificationAPI.Models.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("RecruiterEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UniqueUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UniqueUrl")
                        .IsUnique();

                    b.ToTable("Forms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 8, 26, 14, 10, 14, 724, DateTimeKind.Utc).AddTicks(2056),
                            RecruiterEmail = "recruiter1@test.com",
                            Status = "Pending",
                            UniqueUrl = "test-form-1"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 8, 26, 14, 10, 14, 724, DateTimeKind.Utc).AddTicks(2067),
                            RecruiterEmail = "recruiter2@test.com",
                            Status = "Pending",
                            UniqueUrl = "test-form-2"
                        });
                });

            modelBuilder.Entity("DocumentVerificationAPI.Models.PersonalInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("FormId")
                        .IsUnique();

                    b.ToTable("PersonalInfo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Address = "123 Test Street, Test City, TC 12345",
                            CreatedAt = new DateTime(2025, 8, 26, 14, 10, 14, 724, DateTimeKind.Utc).AddTicks(2454),
                            DateOfBirth = new DateTime(1990, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@test.com",
                            FirstName = "John",
                            FormId = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastName = "Doe",
                            Phone = "+1234567890"
                        });
                });

            modelBuilder.Entity("DocumentVerificationAPI.Models.Document", b =>
                {
                    b.HasOne("DocumentVerificationAPI.Models.Form", "Form")
                        .WithMany("Documents")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("DocumentVerificationAPI.Models.PersonalInfo", b =>
                {
                    b.HasOne("DocumentVerificationAPI.Models.Form", "Form")
                        .WithOne("PersonalInfo")
                        .HasForeignKey("DocumentVerificationAPI.Models.PersonalInfo", "FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("DocumentVerificationAPI.Models.Form", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("PersonalInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
